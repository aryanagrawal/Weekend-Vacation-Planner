/*
 * Amadeus Travel Innovation Sandbox
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AffiliateSearchResponse;
import io.swagger.client.model.AirportAutocompleteResponse;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import io.swagger.client.model.CarSearchResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.ExtensiveTrainSearchResponse;
import io.swagger.client.model.ExtremeSearchResponse;
import io.swagger.client.model.FlightTrafficSearchResult;
import io.swagger.client.model.HotelPropertyResponse;
import io.swagger.client.model.HotelSearchResponse;
import org.joda.time.LocalDate;
import io.swagger.client.model.LocationResponse;
import io.swagger.client.model.LowFareSearchResponse;
import io.swagger.client.model.NearestAirport;
import io.swagger.client.model.PointsOfInterestResponse;
import io.swagger.client.model.RailStationAutocompleteResponse;
import io.swagger.client.model.RailStationResponse;
import io.swagger.client.model.TopDestinationsSearchResponse;
import io.swagger.client.model.TopSearchesSearchResponse;
import io.swagger.client.model.TrainScheduleSearchResponse;
import io.swagger.client.model.TravelRecordResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Airport Autocomplete - Find an IATA location code for flight search based on a city or airport name using the term parameter. By only using the country parameter, this API is also able to find all the IATA location codes associated with a country. Both term and country parameters can be used together to filter the results accordingly. The API is fully JQuery-Autocomplete compatible to enable you to quickly build a drop-down list for your users to find the right airport easily.
     *
     * &lt;p&gt;Using the term parameter and given the start of any word in an airport&#39;s official name, a city name, or the start of an &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt;, this API provides the full name and IATA location code of the city or airport, for use in flight searches. Only major cities and civilian airports with several commercial flights per week are included by default. The response provides up to 20 possible matches, sorted by importance, in a &lt;a href&#x3D;\&quot;http://jqueryui.com/autocomplete/\&quot;&gt;JQuery UI Autocomplete&lt;/a&gt; compatible format. &lt;a href&#x3D;\&quot;https://github.com/amadeus-travel-innovation-sandbox/sandbox-content/blob/master/airport-autocomplete-template.html\&quot;&gt;This sample implementation&lt;/a&gt; using JQuery UI may help. This API uses data from the &lt;a href&#x3D;\&quot;https://github.com/opentraveldata/opentraveldata/blob/master/opentraveldata/optd_por_public.csv\&quot;&gt;OpenTravelData&lt;/a&gt; project. &lt;/p&gt;  &lt;p&gt;By only using the country parameter, this API is also able to find all the IATA location codes associated with a country. Both term and country parameters can be used together to filter the results accordingly.           &lt;/p&gt; &lt;p&gt;The value returned is the IATA location code. The label returned is always in UTF-8 format, with the airport official name (which is often in the native language), in the format of English City Name (if not already included in the airport name).&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airportAutocompleteTest() throws ApiException {
        String apikey = null;
        String term = null;
        String country = null;
        Boolean allAirports = null;
        List<AirportAutocompleteResponse> response = api.airportAutocomplete(apikey, term, country, allAirports);

        // TODO: test validations
        
    }
    
    /**
     * Car Rental Airport Search - Find car rental providers and rates when you provide an airport code, as well as the pick-up and drop-off dates. Optional parameters such as currency and rental provider codes are also available and can be used to narrow down the results. This API is an ideal pairing with the flight and hotel search to provide ground transportation options at the destination.
     *
     * &lt;p&gt;With this API you can find out the price and type of car, for all car rental providers, near a specified airport.&lt;/p&gt;  &lt;p&gt;You can quickly see the locations of car providers near a given airport, and what cars are available to rent, and at what prices. This API is based on our car pricing service that gets live availability from car providers, and is used to power a variety of airline and travel agency websites.&lt;/p&gt;             &lt;p&gt;Results are validated from car providers, and thus response times may take up to 10 seconds (response times are typically about 5s), and the number of concurrent calls is throttled per user to avoid flooding our provider&#39;s systems. However, this means the final result is guaranteed to be live and accurate.&lt;/p&gt;  &lt;p&gt;The configuration of this API allows search for car rentals in the rental location where the car is picked up (at the start of the rental), is the same as the one where it will be dropped off.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void carRentalAirportSearchTest() throws ApiException {
        String apikey = null;
        String location = null;
        String pickUp = null;
        String dropOff = null;
        String lang = null;
        String currency = null;
        String provider = null;
        String rateClass = null;
        String ratePlan = null;
        String rateFilter = null;
        List<String> vehicle = null;
        CarSearchResponse response = api.carRentalAirportSearch(apikey, location, pickUp, dropOff, lang, currency, provider, rateClass, ratePlan, rateFilter, vehicle);

        // TODO: test validations
    }
    
    /**
     * Car Rental Geosearch - Locate car rental providers and available vehicles when you define a circular area with one coordinate and radius, as well as the pick-up and drop-off dates. Optional parameters such as currency and rental provider codes are also available and can be used to narrow down the results. This API is an ideal pairing with the flight and hotel search to provide ground transportation options at the destination.
     *
     * &lt;p&gt;With this API you can find out the price and type of car, for all car rental providers, in a specified geographical location.&lt;/p&gt;  &lt;p&gt;You can quickly see the locations of car providers near a given point, and what cars are available to rent, and at what prices. This API is based on our car pricing service that gets live availability from car providers, and is used to power a variety of airline and travel agency websites.&lt;/p&gt;             &lt;p&gt;Results are validated from car providers, and thus response times may take up to 10 seconds (response times are typically about 5s), and the number of concurrent calls is throttled per user to avoid flooding our provider&#39;s systems. However, this means the final result is guaranteed to be live and accurate.&lt;/p&gt;  &lt;p&gt;The configuration of this API allows search for car rentals in the rental location where the car is picked up (at the start of the rental), is the same as the one where it will be dropped off. &lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void carRentalGeosearchTest() throws ApiException {
        String apikey = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        Integer radius = null;
        String pickUp = null;
        String dropOff = null;
        String lang = null;
        String currency = null;
        String provider = null;
        String rateClass = null;
        String ratePlan = null;
        String rateFilter = null;
        List<String> vehicle = null;
        CarSearchResponse response = api.carRentalGeosearch(apikey, latitude, longitude, radius, pickUp, dropOff, lang, currency, provider, rateClass, ratePlan, rateFilter, vehicle);

        // TODO: test validations
    }
    
    /**
     * Flight Affiliate Search - Use Travel Audience Connect&#39;s affiliate network API to search flights from our list of partners and provides deep-links to allow the user to book directly on the airline website.
     *
     * &lt;p&gt;The Flight Affiliate Search API combines Amadeus&#39; flight search technology with Travel Audience&#39;s Connect API partners to provide a unique flight search, where all results come with deep-links to book the flight at a partner&#39;s website. The API will let you easily provide the traveler with a path to book flights from your application.&lt;/p&gt; &lt;p&gt;Travel Audience Connect partners include &lt;ul&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;http://www.cityjet.com/\&quot;&gt;CityJet&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://www.aireuropa.com/en/flights\&quot;&gt;Air Europa&lt;/a&gt; and &lt;a href&#x3D;\&quot;http://www.flytap.com/\&quot;&gt;TAP&lt;/a&gt; in Western Europe,&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;http://uralairlines.com/\&quot;&gt;Ural Airlines&lt;/a&gt; in Russia, &lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;http://www.avianca.com.br/\&quot;&gt;Avianca Brazil&lt;/a&gt;  and&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;http://www.jal.com/\&quot;&gt;JAL&lt;/a&gt; in East Asia&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;Only Travel Audience Connect partner airlines are searched. For an up-to-date list of routes, see the route maps on each partners respective websites above. You can earn commission using the deep links provided in the search results if you sign up for an account at &lt;a href&#x3D;\&quot;http://connect.travelaudience.com/\&quot;&gt;connect.travelaudience.com&lt;/a&gt;.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightAffiliateSearchTest() throws ApiException {
        String apikey = null;
        String origin = null;
        String destination = null;
        String departureDate = null;
        String returnDate = null;
        Integer adults = null;
        Integer children = null;
        Integer infants = null;
        List<String> includeMerchants = null;
        List<String> excludeMerchants = null;
        Integer maxPrice = null;
        String currency = null;
        Boolean mobile = null;
        AffiliateSearchResponse response = api.flightAffiliateSearch(apikey, origin, destination, departureDate, returnDate, adults, children, infants, includeMerchants, excludeMerchants, maxPrice, currency, mobile);

        // TODO: test validations
    }
    
    /**
     * Flight Extensive Search - Build travel searches based on very flexible and open range of dates. You can use it to answer questions such as \&quot;When is the best date to fly...\&quot;.  It&#39;s built on Amadeus&#39; Featured Results technology, which returns thousands of results (prices, itineraries and dates) in a matter of milliseconds. Results are available over half a calendar year with a 1 to 15 day stay duration
     *
     * &lt;p&gt;The Extensive Flight Search allows you to find the prices of one-way or return flights between two airports over a large number of dates, and for a large variety of stay durations. The search doesn&#39;t return exact itineraries, but rather tells you the best price for a flight on a given day, for a stay of a given duration.&lt;/p&gt;  &lt;p&gt;The search is based on our Extreme Search platform, which continually caches a large number of flight search results from a list of origin cities to a variety of destinations. Since it&#39;s a cached search, the response time is fast, but not all origin airports are available. Here is &lt;a href&#x3D;\&quot;https://github.com/amadeus-travel-innovation-sandbox/sandbox-content/blob/master/flight-search-cache-origin-destination.csv\&quot;&gt;a list of the currently supported origin-destination IATA location pairs&lt;/a&gt;. We try to keep this list as fresh as possible for you, but be aware that it may not always be exactly up-to-date and it can change without warning.&lt;/p&gt;  &lt;p&gt;That said, a price graph like this provides a powerful bargin shopping tool - allowing travelers with flexible itineraries to identify days on which they can get the cheapest flights to their destinations.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightExtensiveSearchTest() throws ApiException {
        String apikey = null;
        String origin = null;
        String destination = null;
        String departureDate = null;
        Boolean oneWay = null;
        String duration = null;
        Boolean direct = null;
        String maxPrice = null;
        String aggregationMode = null;
        ExtremeSearchResponse response = api.flightExtensiveSearch(apikey, origin, destination, departureDate, oneWay, duration, direct, maxPrice, aggregationMode);

        // TODO: test validations
    }
    
    /**
     * Flight Inspiration Search - Go beyond the traditional search by origin, destination and dates to meet the needs of travelers looking for suggestions and a search experience that reflects the way they choose their trip. This can help you answer the question \&quot;Where can I go within a given travel budget?\&quot;
     *
     * &lt;p&gt;The Inspiration Flight Search allows you to find the prices of one-way and return flights from an origin city without necessarily having a destination, or even a flight date, in mind. The search doesn&#39;t return a distinct set of price options, but rather, can tell you the price of flying from a given city to some destination, for a trip of a given duration, that falls within a given date range.&lt;/p&gt;  &lt;p&gt;The search is based on our Extreme Search platform, which continually caches a large number of flight search results from a list of origin cities to a variety of destinations. Since it&#39;s a cached search, the response time is fast, but not all origin airports are available. Here is &lt;a href&#x3D;\&quot;https://github.com/amadeus-travel-innovation-sandbox/sandbox-content/blob/master/flight-search-cache-origin-destination.csv\&quot;&gt;a list of the currently supported origin-destination IATA location pairs&lt;/a&gt;. We try to keep this list as fresh as possible for you, but be aware that it may not always be exactly up-to-date and it can change without warning.&lt;/p&gt;  &lt;p&gt;Despite this limitation don&#39;t underestimate the power of this API. Thanks to its quick response speed you can easily pair it with other APIs to provide a low fare and inspiration for any destination. For example, you can could combine it with a event search API and suggest a total price to see go and see an concert or a game in a selection of cities.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightInspirationSearchTest() throws ApiException {
        String apikey = null;
        String origin = null;
        String destination = null;
        String departureDate = null;
        Boolean oneWay = null;
        String duration = null;
        Boolean direct = null;
        String maxPrice = null;
        String aggregationMode = null;
        ExtremeSearchResponse response = api.flightInspirationSearch(apikey, origin, destination, departureDate, oneWay, duration, direct, maxPrice, aggregationMode);

        // TODO: test validations
    }
    
    /**
     * Flight Low-Fare Search - Find the cheapest one way or return itineraries and fares between two airports at specific dates.
     *
     * &lt;p&gt;This is the low fare search engine Amadeus uses to retrieve the best price for flights, based on our latest Master Pricer Travel Board technology. This document describes how to make a low fare search and how to handle the returned messages.&lt;/p&gt;  &lt;p&gt;The message is composed of multiple results for given request. A result is defined by a unique combination of price, tax, passenger type, fare type, cabin, and availability for each requested segment.&lt;/p&gt;   &lt;p&gt;A result is then composed of single or multiple itineraries. Each itinerary is composed of an outbound leg, and, if a return date was specified, an inbound leg. Each leg is composed of a list of one or more flights, that the traveller will be required to take in order to get from the origin airport to the destination airport.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightLowFareSearchTest() throws ApiException {
    	String apikey = null;
		String origin = null;
		String destination = null;
		String departureDate = null;
        String returnDate = null;
        String arriveBy = null;
        String returnBy = null;
        Integer adults = null;
        Integer children = null;
        Integer infants = null;
        List<String> includeAirlines = null;
        List<String> excludeAirlines = null;
        Boolean nonstop = null;
        Integer maxPrice = null;
        String currency = null;
        String travelClass = null;
        Integer numberOfResults = null;
        LowFareSearchResponse response = api.flightLowFareSearch(apikey, origin, destination, departureDate, returnDate, arriveBy, returnBy, adults, children, infants, includeAirlines, excludeAirlines, nonstop, maxPrice, currency, travelClass, numberOfResults);
        
        assertEquals(response, false);
        // TODO: test validations
    }
    
    /**
     * Flight Traffic API - Find the true origin and destination traffic summary between two journey points over a specified period. This can help you answer questions like \&quot;What cities are people coming from to visit Los Angeles between January through April of 2015\&quot;
     *
     * &lt;p&gt;The Flight Traffic API lets you find the origin and destination traffic summary between two journey points over a specified period.&lt;/p&gt; &lt;p&gt;The search returns number of flights &amp; travelers for each origin and destination, ordered by popularity, for each month specified within the search period. This search can help you answer questions like \&quot;Where are people from Los Angeles traveling to between January and April of 2015?\&quot; or \&quot;Which is the most popular month for New Yorkers to travel last year?\&quot;. &lt;/p&gt; &lt;p&gt;This search is based on Amadeus&#39; Travel Intelligence Engine, a high performance scalable cloud-based platform, born in the age of Big Data and purposely built for the industry bringing total flexibility and speed to business intelligence for travel. Please see &lt;a href&#x3D;\&quot;http://www.amadeus.com/travelintelligence\&quot;&gt;amadeus.com/travelintelligence&lt;/a&gt; for more information.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void flightTrafficAPITest() throws ApiException {
        String apikey = null;
        String period = null;
        String origin = null;
        String destination = null;
        Integer numberOfResultsPerPeriod = null;
        List<FlightTrafficSearchResult> response = api.flightTrafficAPI(apikey, period, origin, destination, numberOfResultsPerPeriod);

        // TODO: test validations
    }
    
    /**
     * Hotel Airport Search - Locate the cheapest available rooms near a given airport, for a given stay period. This API is ideal if you want to connect flight and hotels. Provide an IATA airport code, as well as the check-in and check-out dates, and get a list of up to 140 properties (names, codes, image, amenities) with their locations and rates. Optional parameters such as currency and maximum rates, amenities or hotel chain codes are also available and can be used to narrow down the results. More optional parameters such as show_sold_out &amp; rooms can be used to show sold out rooms and all available rooms.
     *
     * &lt;p&gt;A fast Hotel shopping API to see which hotels are available in a given area, on a given day and displays their lowest prices. With this API you can find out the price of the cheapest daily rate for all hotels near a given airport.&lt;/p&gt;  &lt;p&gt;This API allows you to quickly see the locations of hotels near a given airport, and what prices in that area look like. Note that hotel images are not available to users outside of Amadeus, as we are not licensed to redistribute them. The API is based on our high-speed hotel pricing cache, which is also used to power the &lt;a href&#x3D;\&quot;https://hotelsearchengine.amadeus.com/\&quot;&gt;Amadeus Hotel Search Engine&lt;/a&gt; application. Results are returned very quickly, response times are generally under 2s. Our cache has great global coverage and is constantly refreshed with the latest prices.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hotelAirportSearchTest() throws ApiException {
        String apikey = null;
        String location = null;
        String checkIn = null;
        String checkOut = null;
        Integer radius = null;
        String lang = null;
        String currency = null;
        String chain = null;
        BigDecimal maxRate = null;
        Integer numberOfResults = null;
        Boolean allRooms = null;
        Boolean showSoldOut = null;
        List<String> amenity = null;
        HotelSearchResponse response = api.hotelAirportSearch(apikey, location, checkIn, checkOut, radius, lang, currency, chain, maxRate, numberOfResults, allRooms, showSoldOut, amenity);

        // TODO: test validations
    }
    
    /**
     * Hotel Geosearch by box - Locate the cheapest available rooms within a given rectangular region for a given stay period. It&#39;s ideal for displaying results on a map.
     *
     * &lt;p&gt;A fast Hotel shopping API to see which hotels are available in a given area, on a given day and displays their lowest prices. With this API you can find out the price of the cheapest daily rate for all hotels within a specified geographical region.&lt;/p&gt;  &lt;p&gt;This API allows you to quickly see the hotel locations in a region, and what prices in that area look like,  as well as the check-in and check-out dates, and get a list of up to 140 properties (names, codes, image, amenities) with their locations and rates. Optional parameters such as currency and maximum rates, amenities or hotel chain codes are also available and can be used to narrow down the results. More optional parameters such as show_sold_out &amp; rooms can be used to show sold out rooms and all available rooms.&lt;/p&gt;              &lt;p&gt;The API is based on our high-speed hotel pricing cache, which is also used to power the &lt;a href&#x3D;\&quot;https://hotelsearchengine.amadeus.com/\&quot;&gt;Amadeus Hotel Search Engine&lt;/a&gt; application. Results are returned very quickly, response times are generally under 2s. Our cache has great global coverage and is constantly refreshed with the latest prices.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hotelGeosearchByBoxTest() throws ApiException {
        String apikey = null;
        String southWestCorner = null;
        String northEastCorner = null;
        String checkIn = null;
        String checkOut = null;
        String lang = null;
        String currency = null;
        String chain = null;
        BigDecimal maxRate = null;
        Integer numberOfResults = null;
        Boolean allRooms = null;
        Boolean showSoldOut = null;
        List<String> amenity = null;
        HotelSearchResponse response = api.hotelGeosearchByBox(apikey, southWestCorner, northEastCorner, checkIn, checkOut, lang, currency, chain, maxRate, numberOfResults, allRooms, showSoldOut, amenity);

        // TODO: test validations
    }
    
    /**
     * Hotel Geosearch by Circle API - Locate the cheapest available rooms within a given radius of a defined point for a given stay period.
     *
     * &lt;p&gt;A fast Hotel shopping API to see which hotels are available in a given area, on a given day and displays their lowest prices. With this API you can find out the price of the cheapest daily rate for all hotels within a specified radius of a point.&lt;/p&gt;  &lt;p&gt;This API allows you to quickly see the hotel locations in a region, and what prices in that area look like,  as well as the check-in and check-out dates, and get list of up to 140 properties (names, codes, image, amenities) with their locations and rates. Optional parameters such as currency and maximum rates, amenities or hotel chain codes are also available and can be used to narrow down the results. More optional parameters such as show_sold_out &amp; rooms can be used to show sold out rooms and all available rooms. &lt;/p&gt;  &lt;p&gt;The API is based on our high-speed hotel pricing cache, which is also used to power the &lt;a href&#x3D;\&quot;https://hotelsearchengine.amadeus.com/\&quot;&gt;Amadeus Hotel Search Engine&lt;/a&gt; application. Results are returned very quickly, response times are generally under 2s. Our cache has great global coverage and is constantly refreshed with the latest prices.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hotelGeosearchByCircleTest() throws ApiException {
        String apikey = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        Integer radius = null;
        String checkIn = null;
        String checkOut = null;
        String lang = null;
        String currency = null;
        String chain = null;
        BigDecimal maxRate = null;
        Integer numberOfResults = null;
        Boolean allRooms = null;
        Boolean showSoldOut = null;
        List<String> amenity = null;
        HotelSearchResponse response = api.hotelGeosearchByCircle(apikey, latitude, longitude, radius, checkIn, checkOut, lang, currency, chain, maxRate, numberOfResults, allRooms, showSoldOut, amenity);

        // TODO: test validations
    }
    
    /**
     * Hotel Property Code Search - Find out more room and rate information once you have found your preferred hotel.
     *
     * &lt;p&gt;This API allows you to quickly see the detailed information of a single hotel, including descriptions, address, GPS location, amenities, awards, lowest priced room and all room prices and booking information. &lt;/p&gt;  &lt;p&gt;This API gives you more information on a specific property. Optional parameters such as show_sold_out &amp; rooms can be used to show sold out rooms and all available rooms. &lt;/p&gt;  &lt;p&gt;The API is based on our high-speed hotel pricing cache, which is also used to power the &lt;a href&#x3D;\&quot;https://hotelsearchengine.amadeus.com/\&quot;&gt;Amadeus Hotel Search Engine&lt;/a&gt; application. Results are returned very quickly, response times are generally under 2s. Our cache has great global coverage and is constantly refreshed with the latest prices.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hotelPropertyCodeSearchTest() throws ApiException {
        String apikey = null;
        String propertyCode = null;
        String checkIn = null;
        String checkOut = null;
        String lang = null;
        String currency = null;
        Boolean allRooms = null;
        Boolean showSoldOut = null;
        HotelPropertyResponse response = api.hotelPropertyCodeSearch(apikey, propertyCode, checkIn, checkOut, lang, currency, allRooms, showSoldOut);

        // TODO: test validations
    }
    
    /**
     * Location Information - Find more information about any IATA city or airport location code. With this API, you can find information such as city and airport names and locations, as well as information on timezones and airport usage.
     *
     * &lt;p&gt;This service retrieves the location information corresponding to a IATA city or airport code.&lt;/p&gt;  &lt;p&gt;When provided with an &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt;, the service determines whether this code could relate to a city code, an airport code or both. If the city could contain multiple airports, it will return all possible airports that correspond to that city code.&lt;/p&gt;  &lt;p&gt;This API is based on the Amadeus supported &lt;a href&#x3D;\&quot;http://opentraveldata.github.io/geobases\&quot;&gt;Geobases&lt;/a&gt; open-source project. If you wish to make your own database with all IATA location information, in order to get faster reponses, you can download the latest raw data from their &lt;a href&#x3D;\&quot;https://github.com/opentraveldata/opentraveldata/blob/master/opentraveldata/optd_por_public.csv\&quot;&gt;github page&lt;/a&gt;.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationInformationTest() throws ApiException {
        String apikey = null;
        String code = null;
        LocationResponse response = api.locationInformation(apikey, code);

        // TODO: test validations
    }
    
    /**
     * Nearest Relevant Airport - Find the most useful nearby airport to a given location.
     *
     * &lt;p&gt;This service gives the most relevant airports in a radius of 500 km around the given coordinates. The relevance of an airport is computed by dividing the number of airport movements (take offs and landings) by the distance from the point. This causes the relevance of an airport to increase exponentially as you approach it.&lt;/p&gt;  &lt;p&gt;To minimize response time, all distances are computed as a &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Great-circle_distance\&quot;&gt;great-circle distance&lt;/a&gt; from the provided coordinates to the airport coordinates, and thus do not take into account traffic conditions, international boundaries, mountains, water, or other elements that might make the a nearby airport hard to reach.&lt;/p&gt;  &lt;p&gt;Only civilian airports with at least several commercial flights per week are included in the results.&lt;/p&gt;  &lt;p&gt;The result is a list of airports sorted by decreasing relevance. It always contains the nearest airport with significant commercial traffic. You can freely download the &lt;a href&#x3D;\&quot;https://github.com/opentraveldata/opentraveldata/blob/master/opentraveldata/optd_por_public.csv\&quot;&gt;point of reference information&lt;/a&gt; used by this API from the &lt;a href&#x3D;\&quot;https://github.com/opentraveldata/opentraveldata\&quot;&gt;Open Travel Data&lt;/a&gt; project.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nearestRelevantAirportTest() throws ApiException {
        String apikey = null;
        String latitude = null;
        String longitude = null;
        List<NearestAirport> response = api.nearestRelevantAirport(apikey, latitude, longitude);

        // TODO: test validations
    }
    
    /**
     * Rail Station Autocomplete - Transform user input into a unique rail station code. Currently only French and Italian stations are supported.
     *
     * &lt;p&gt;Given the start of any word in a rail station&#39;s official name, as a term, this API provides the full name and rail station ID of a rail station for use in searches. The response provides an array of up to 20 possible matches, sorted by passenger traffic, in a JQuery Autocomplete compatible format.&lt;/p&gt;  &lt;p&gt;The value returned is the UIC station code. The label returned is always in UTF-8 format, with the station&#39;s official name (which is often in the native language). Agglomeration station codes may also be returned.&lt;/p&gt;  &lt;p&gt;Note that only French and Italian rail stations are supported by the Rail Station Autocomplete API&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void railStationAutocompleteTest() throws ApiException {
        String apikey = null;
        String term = null;
        List<RailStationAutocompleteResponse> response = api.railStationAutocomplete(apikey, term);

        // TODO: test validations
    }
    
    /**
     * Rail-Station Information - Retrieve the rail station information corresponding to an Amadeus UIC rail station ID. Currently only French and Italian stations are supported.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void railStationInformationTest() throws ApiException {
        String apikey = null;
        String id = null;
        RailStationResponse response = api.railStationInformation(apikey, id);

        // TODO: test validations
    }
    
    /**
     * Top Flight Destinations - Find the most popular flight destinations from an origin during a period. This can help you answer questions like \&quot;Where are most people going to from Paris during the month of September?\&quot;
     *
     * &lt;p&gt;The Top Flight Destinations API lets you find the most popular flight destinations from an origin during a period. This can help you answer questions like \&quot;Where are most people from Paris going to during the month of September?\&quot; The API is based on estimated flight traffic summary data from two journey points over a specific period. It returns up to 50 results, ordered by popularity, showing number of travelers as well as number of flights.&lt;/p&gt;  &lt;p&gt;This estimated search is based on Amadeus&#39; Travel Intelligence Engine, a high performance scalable cloud-based platform, born in the age of Big Data and purposely built for the industry bringing total flexibility and speed to business intelligence for travel. Please see &lt;a href&#x3D;\&quot;http://www.amadeus.com/travelintelligence\&quot;&gt;amadeus.com/travelintelligence&lt;/a&gt; for more information.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void topFlightDestinationsTest() throws ApiException {
        String apikey = null;
        String period = null;
        String origin = null;
        Integer numberOfResults = null;
        TopDestinationsSearchResponse response = api.topFlightDestinations(apikey, period, origin, numberOfResults);

        // TODO: test validations
    }
    
    /**
     * Top Flight Searches - Find the most popular flight searches from an origin in a during given search period. This can help you answer questions like \&quot;Where are people looking to travel from Paris during the month of September?\&quot;
     *
     * &lt;p&gt;The Top Flight Search allows you to find number of estimated searches from an origin, optionally a destination, within a time period when travelers are performing the searches.&lt;/p&gt;  &lt;p&gt;The search is based on queries performed from within a country (also refers to as market) and returns up to 50 results, ordered by popularity, showing number of searches for most searched destination with its previous year comparison. This search also shows patterns on how travelers are searching for flights, revealing where, when and for how long they’re planning to travel. See &lt;ul&gt;&lt;li&gt;Trip Durations(How long are the trips planned for?) and&lt;/li&gt; &lt;li&gt; Advance Search Period (How long before departures do travelers start searching for their trips?)&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt; &lt;p&gt;This estimated search is based on Amadeus&#39; Travel Intelligence Engine, a high performance scalable cloud-based platform, born in the age of Big Data and purposely built for the industry bringing total flexibility and speed to business intelligence for travel. Please see &lt;a href&#x3D;\&quot;http://www.amadeus.com/travelintelligence\&quot;&gt;amadeus.com/travelintelligence&lt;/a&gt; for more information.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void topFlightSearchesTest() throws ApiException {
        String apikey = null;
        String period = null;
        String origin = null;
        String country = null;
        String destination = null;
        Integer numberOfResults = null;
        TopSearchesSearchResponse response = api.topFlightSearches(apikey, period, origin, country, destination, numberOfResults);

        // TODO: test validations
    }
    
    /**
     * Train Extensive Search - Provides multi-day availability and a variety of schedule and pricing options to travel to your destination instantly. Supports SNCF French trains only.
     *
     * &lt;p&gt;This API allows you to search trains availability and prices for a single day or date range. It&#39;s based on our Rail Instant Search technology, providing you with immediate results from our rail search cache.&lt;/p&gt;  &lt;p&gt;This API has content from SNCF (French trains).&lt;/p&gt;              &lt;p&gt;The content is also restricted to single-leg trips - where a single train takes you directly from the origin to the destination.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trainExtensiveSearchTest() throws ApiException {
        String apikey = null;
        String origin = null;
        String destination = null;
        String departureDate = null;
        ExtensiveTrainSearchResponse response = api.trainExtensiveSearch(apikey, origin, destination, departureDate);

        // TODO: test validations
    }
    
    /**
     * Train Schedule Search - Suggest destinations from your chosen departure station. Supports SNCF French Rail only.
     *
     * &lt;p&gt;This API allows you to find all the possible destinations in the Rail Instant Search cache (used by Extensive Search above) from a given origin station on a given day. You can use this to help build network maps, journey planners or provide inspiration for rail travel.&lt;/p&gt;  &lt;p&gt;This API has continuous content from &lt;a href&#x3D;\&quot;http://www.sncf.com/\&quot;&gt;SNCF&lt;/a&gt;.&lt;br /&gt; All the options returned are single-leg trips - where a single train takes you directly from the origin to the destination. In general, only departure dates up to 90 days in the future are supported&lt;/p&gt;  &lt;p&gt;Currently agglomeration stations are not supported&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trainScheduleSearchTest() throws ApiException {
        String apikey = null;
        String origin = null;
        LocalDate departureDate = null;
        TrainScheduleSearchResponse response = api.trainScheduleSearch(apikey, origin, departureDate);

        // TODO: test validations
    }
    
    /**
     * Travel Record Retrieve - Enable travelers to explore the details of their journeys stored in the Amadeus system using our Retrieve Travel Record API.
     *
     * &lt;p&gt;Note: This API requires the use of HTTPS&lt;/p&gt;  &lt;p&gt;This service retrieves a travel record (also sometimes referred to as a PNR) for a given journey when provided with Record Locator to identify a travel record, along with the last name of any traveler who is marked as a passenger on this record.&lt;/p&gt;  &lt;p&gt;The API provides detailed information on a given record, including any air, car, hotel or rail reservations, as well as passenger details, and contact frequent traveler information for each passenger when available. You can use this to provide a wide variety of pre-trip or in-trip services.&lt;/p&gt;  &lt;p&gt;Note that this API transmits sensitive personal data about a traveler&#39;s journey. We work hard to ensure that we comply with all the legal requirements this entails, and as an application owner, you need to do so too - we don&#39;t want you to get in trouble! This paragraph, or anything else in our documentation, does not constitute legal advice, it&#39;s just to give you an idea of some of the potential issues that you may encounter. Please check your legal obligations regarding the use of this data before implementing this API&lt;/p&gt;  &lt;p&gt;In most countries, the data in the returned travel record is considered to be the property of the traveler. In order to ensure that you are acting on behalf of the traveler, we require you to provide the traveler&#39;s last name in addition to the record locator when you make a call to this API. You should ensure that you have consent from the traveler before retrieving this record, in some countries this is a legal requirement - please respect this appropriately.&lt;/p&gt;  &lt;p&gt;Our data center is based in Europe, so there is a legal requirement that you to access this API over a secure connection. If you plan to store the information returned by this API, ensure you comply with storage requirements for European data, in addition to those of your local country. For example, there are strict requirements on the caching of retrieved travel records, so please ensure the cache control HTTP headers in the response are respected.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void travelRecordRetrieveTest() throws ApiException {
        String apikey = null;
        String recordLocator = null;
        String lastName = null;
        String env = null;
        TravelRecordResponse response = api.travelRecordRetrieve(apikey, recordLocator, lastName, env);

        // TODO: test validations
    }
    
    /**
     * YapQ City Name Search - Find landmarks and attractions in a given city.
     *
     * Amadeus has partnered with &lt;a href&#x3D;\&quot;http://yapq.io/\&quot;&gt;YapQ&lt;/a&gt; to bring you point of interest APIs with the goal of offering you unbiased ratings of landmarks and tourist attractions. YapQ rates these points according to their interest on social media and provides Wikipedia content and Geonames ID in a given city. &lt;br /&gt; YapQ&#39;s service indexes millions of points around the world, and provides content in 12 different languages. This allows you to ensure you catch the &lt;em&gt;must-see&lt;/em&gt; sights in a &lt;a href&#x3D;\&quot;http://yapq.io/cities.html\&quot;&gt;YapQ supported city&lt;/a&gt;.&lt;br /&gt; Each point of interest comes with links to content, grading information, location and directions to help make discovering your destination easy and fun.&lt;br /&gt;&lt;br /&gt; This service is still under active development, and the response format may change without warning. We&#39;d be interested in your feedback - &lt;a href&#x3D;\&quot;mailto:sandbox@yapq.com\&quot;&gt;send us an email&lt;/a&gt;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void yapQCityNameSearchTest() throws ApiException {
        String apikey = null;
        String cityName = null;
        String lang = null;
        String category = null;
        Boolean geonames = null;
        Boolean vibes = null;
        Boolean socialMedia = null;
        String imageSize = null;
        Integer numberOfImages = null;
        Integer numberOfResults = null;
        PointsOfInterestResponse response = api.yapQCityNameSearch(apikey, cityName, lang, category, geonames, vibes, socialMedia, imageSize, numberOfImages, numberOfResults);

        // TODO: test validations
    }
    
    /**
     * YapQ Geosearch - Find landmarks and attractions near a given point.
     *
     * Amadeus has partnered with &lt;a href&#x3D;\&quot;http://yapq.io/\&quot;&gt;YapQ&lt;/a&gt; to bring you point of interest APIs with the goal of offering you unbiased ratings of landmarks and tourist attractions. YapQ rates places according to their interest on social media and provides Wikipedia content and Geonames ID at a given location. &lt;br /&gt; YapQ&#39;s service indexes millions of points around the world, and provides content in 12 different languages. This allows you to ensure you catch the &lt;em&gt;must-see&lt;/em&gt; sights at a specific &lt;a href&#x3D;\&quot;http://yapq.io/cities.html\&quot;&gt;YapQ supported location&lt;/a&gt;.&lt;br /&gt; Each point of interest comes with links to content, grading information, location and directions to help make discovering your destination easy and fun.&lt;br /&gt;&lt;br /&gt; This service is still under active development, and the response format may change without warning. We&#39;d be interested in your feedback - &lt;a href&#x3D;\&quot;mailto:sandbox@yapq.com\&quot;&gt;send us an email&lt;/a&gt;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void yapQGeosearchTest() throws ApiException {
        String apikey = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        Integer radius = null;
        String lang = null;
        String category = null;
        Boolean geonames = null;
        Boolean vibes = null;
        Boolean socialMedia = null;
        String imageSize = null;
        Integer numberOfImages = null;
        Integer numberOfResults = null;
        PointsOfInterestResponse response = api.yapQGeosearch(apikey, latitude, longitude, radius, lang, category, geonames, vibes, socialMedia, imageSize, numberOfImages, numberOfResults);

        // TODO: test validations
    }
    
}
